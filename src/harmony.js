// Generated by CoffeeScript 1.8.0
var Harmony, Redwire, copy, dirdiff, require_raw, series,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

dirdiff = require('./dirdiff');

require_raw = require('./require_raw');

Redwire = require('redwire');

series = require('./series');

copy = function(source, target) {
  var key, value, _results;
  _results = [];
  for (key in source) {
    value = source[key];
    if (typeof value === 'object') {
      if ((target[key] == null) || typeof target[key] !== 'object') {
        target[key] = {};
      }
      _results.push(copy(value, target[key]));
    } else {
      _results.push(target[key] = value);
    }
  }
  return _results;
};

module.exports = Harmony = (function() {
  function Harmony(options) {
    this.close = __bind(this.close, this);
    this.unload = __bind(this.unload, this);
    this.bind = __bind(this.bind, this);
    this.create = __bind(this.create, this);
    this.read = __bind(this.read, this);
    this.update = __bind(this.update, this);
    this.tick = __bind(this.tick, this);
    this.error = __bind(this.error, this);
    var noop;
    this._options = {
      configdir: process.cwd(),
      refresh: false
    };
    copy(options, this._options);
    this.config = {};
    this.redwires = {};
    this.tick();
    noop = function() {};
    this._interval = this._options.refresh ? setInterval(this.tick, this._options.refresh) : setInterval(noop, 60000);
  }

  Harmony.prototype.error = function(error) {
    if (error.stack != null) {
      return console.error(error.stack);
    } else {
      return console.error(error);
    }
  };

  Harmony.prototype.tick = function() {
    return dirdiff(this._options.configdir, this.config, this.update);
  };

  Harmony.prototype.update = function(added, removed, modified, unchanged) {
    var def, key, keystocreate, source, target, value, _i, _len, _results;
    keystocreate = [];
    for (key in removed) {
      value = removed[key];
      console.log("Deleting " + key + "...");
      delete this.config[key];
      this.unload(key);
    }
    for (key in modified) {
      value = modified[key];
      def = this.read(key);
      if (def == null) {
        continue;
      }
      this.config[key] = value;
      source = JSON.stringify(this.redwires[key].def.config);
      target = JSON.stringify(def.config);
      if (source !== target) {
        console.log("" + source + " isnt " + target);
        console.log("Recreating " + key + "...");
        this.unload(key);
        this.redwires[key] = {
          def: def
        };
        keystocreate.push(key);
        continue;
      }
      console.log("Migrating " + key + "...");
      if (this.redwires[key].def.end != null) {
        this.redwires[key].def.end();
      }
      this.redwires[key].def = def;
      this.bind(key);
    }
    for (key in added) {
      value = added[key];
      def = this.read(key);
      if (def == null) {
        continue;
      }
      this.config[key] = value;
      this.redwires[key] = {
        def: def
      };
      console.log("Creating " + key + "...");
      keystocreate.push(key);
    }
    _results = [];
    for (_i = 0, _len = keystocreate.length; _i < _len; _i++) {
      key = keystocreate[_i];
      _results.push(this.create(key));
    }
    return _results;
  };

  Harmony.prototype.read = function(key) {
    var e;
    try {
      return require_raw("" + this._options.configdir + "/" + key);
    } catch (_error) {
      e = _error;
      this.error(e);
      return null;
    }
  };

  Harmony.prototype.create = function(key) {
    var config, def, k, redwire, v, _ref;
    def = this.redwires[key].def;
    config = {};
    _ref = def.config;
    for (k in _ref) {
      v = _ref[k];
      config[k] = v;
    }
    if (config.log == null) {
      config.log = {};
    }
    config.log.notice = function(message) {
      return console.log(message);
    };
    config.log.error = this.error;
    redwire = new Redwire(config);
    this.redwires[key].redwire = redwire;
    return this.bind(key);
  };

  Harmony.prototype.bind = function(key) {
    var bindings, def, redwire, _ref;
    _ref = this.redwires[key], def = _ref.def, redwire = _ref.redwire;
    bindings = redwire.createNewBindings();
    def.bind(redwire, bindings);
    return redwire.setBindings(bindings);
  };

  Harmony.prototype.unload = function(key) {
    var def, redwire, _ref;
    _ref = this.redwires[key], def = _ref.def, redwire = _ref.redwire;
    if (def.end != null) {
      def.end();
    }
    redwire.close();
    return delete this.redwires[key];
  };

  Harmony.prototype.close = function() {
    var def, _, _ref, _results;
    clearInterval(this._interval);
    _ref = this.redwires;
    _results = [];
    for (_ in _ref) {
      def = _ref[_];
      if (def.def.end != null) {
        def.def.end();
      }
      _results.push(def.redwire.close());
    }
    return _results;
  };

  return Harmony;

})();
